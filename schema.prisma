// *** GENERATED BY PRISMIX :: DO NOT EDIT ***
datasource db {
	provider = "postgresql"
	url = "postgresql://postgres:christ@localhost:5432/School_Management?schema=public"
}
generator client {
	provider = "prisma-client-js"
}
model AcadamicTerm {
	id String @id @default(uuid())
	name String 
	description String 
	duration String @default("3 months")
	admin Admin @relation(name: "AcadamicTermToAdmin", fields: [adminId], references: [id])
	adminId String 
	createAt DateTime @default(now())
	updateAt DateTime @updatedAt
	ExamResult ExamResult? @relation(name: "AcadamicTermToExamResult")
	subject Subject? @relation(name: "AcadamicTermToSubject")
	teacherId Teacher? @relation(name: "AcadamicTermToTeacher")
}
model Admin {
	id String @id @default(uuid())
	AcadamicTerm AcadamicTerm[] @relation(name: "AcadamicTermToAdmin")
	AcadamicYear AcadamicYear[] @relation(name: "AcadamicYearToAdmin")
	name String 
	email String 
	password String 
	role String @default("admin")
	createdAt DateTime @updatedAt
	passwordChangedAt DateTime? @default(now())
	classLevel ClassLevel[] @relation(name: "AdminToClassLevel")
	Program Program[] @relation(name: "AdminToProgram")
	Subject Subject[] @relation(name: "AdminToSubject")
	YearGroup YearGroup[] @relation(name: "AdminToYearGroup")
	Teacher Teacher[] @relation(name: "AdminToTeacher")
}
model AcadamicYear {
	id String @id @default(uuid())
	name String 
	fromYear DateTime 
	toYear DateTime 
	isCurrent Boolean @default(false)
	admin Admin @relation(name: "AcadamicYearToAdmin", fields: [createdBy], references: [id])
	createdBy String 
	students Student[] @relation(name: "AcadamicYearToStudent")
	teachers Teacher[] @relation(name: "AcadamicYearToTeacher")
	createAt DateTime @default(now())
	updateAt DateTime @updatedAt
	ExamResult ExamResult? @relation(name: "AcadamicYearToExamResult")
	Exam Exam? @relation(name: "AcadamicYearToExam")
	YearGroup YearGroup? @relation(name: "AcadamicYearToYearGroup")
}
model Student {
	id String @id @default(uuid())
	AcadamicYear AcadamicYear? @relation(name: "AcadamicYearToStudent", fields: [AcadamicYearId], references: [id])
	AcadamicYearId String? 
	ClassLevel ClassLevel? @relation(name: "ClassLevelToStudent", fields: [classLevelId], references: [id])
	classLevelId String? 
	examResult ExamResult[] @relation(name: "ExamResultToStudent")
	program Program @relation(name: "ProgramToStudent", fields: [programId], references: [id])
	programId String 
	name String 
	perfectName String? 
	email String 
	passwordChangedAt DateTime? @default(now())
	password String 
	studentId String @default("")
	role String @default("student")
	dateAdmitted DateTime @default(now())
	examResults ExamResults[] @relation(name: "ExamResultsToStudent")
	isWithdrawn Boolean @default(false)
	isSuspended Boolean @default(false)
	isGraduated Boolean @default(false)
	isPromoted Boolean @default(false)
	yearGraduated String? 
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
}
model Teacher {
	id String @id @default(uuid())
	AcadamicYear AcadamicYear? @relation(name: "AcadamicYearToTeacher", fields: [AcadamicYearId], references: [id])
	AcadamicYearId String? 
	ClassLevel ClassLevel? @relation(name: "ClassLevelToTeacher", fields: [classLevelId], references: [id])
	classLevelId String? 
	program Program? @relation(name: "ProgramToTeacher", fields: [programId], references: [id])
	programId String? 
	question Question? @relation(name: "QuestionToTeacher")
	subject Subject[] @relation(name: "SubjectToTeacher")
	name String 
	email String 
	password String 
	teacherID String @default("")
	dateEmployed DateTime @default(now())
	isWithdrawn Boolean @default(false)
	isSuspended Boolean @default(false)
	passwordChangedAt DateTime? @default(now())
	role Role @default(teacher)
	applicationStatus Status @default(pending)
	examsCreated Exam[] @relation(name: "ExamToTeacher")
	createdId Admin? @relation(name: "AdminToTeacher", fields: [createdBy], references: [id])
	createdBy String? 
	acadamicId AcadamicTerm? @relation(name: "AcadamicTermToTeacher", fields: [acadamicTermId], references: [id])
	acadamicTermId String? @unique
}
model ClassLevel {
	id String @id @default(uuid())
	name String 
	description String 
	admin Admin? @relation(name: "AdminToClassLevel", fields: [adminId], references: [id])
	adminId String? 
	teachers Teacher[] @relation(name: "ClassLevelToTeacher")
	students Student[] @relation(name: "ClassLevelToStudent")
	subjects Subject[] @relation(name: "ClassLevelToSubject")
	createAt DateTime @default(now())
	updateAt DateTime @updatedAt
	ExamResult ExamResult? @relation(name: "ClassLevelToExamResult")
	Exam Exam? @relation(name: "ClassLevelToExam")
}
model Subject {
	id String @id @default(uuid())
	ClassLevel ClassLevel? @relation(name: "ClassLevelToSubject", fields: [classLevelId], references: [id])
	classLevelId String? 
	ExamResult ExamResult? @relation(name: "ExamResultToSubject")
	exam Exam? @relation(name: "ExamToSubject")
	program Program @relation(name: "ProgramToSubject", fields: [programId], references: [id])
	programId String 
	name String 
	description String? 
	acadamic AcadamicTerm @relation(name: "AcadamicTermToSubject", fields: [acadamicTermId], references: [id])
	acadamicTermId String @unique
	admin Admin @relation(name: "AdminToSubject", fields: [adminId], references: [id])
	adminId String 
	duration String @default("3 Months")
	createAt DateTime @default(now())
	updateAt DateTime @updatedAt
	teacher Teacher? @relation(name: "SubjectToTeacher", fields: [teacherId], references: [id])
	teacherId String? 
}
model ExamResult {
	id String @id @default(uuid())
	Student Student? @relation(name: "ExamResultToStudent", fields: [studentId], references: [id])
	studentId String? 
	exam Exam @relation(name: "ExamToExamResult", fields: [examId], references: [id])
	examId String @unique
	student Subject @relation(name: "ExamResultToSubject", fields: [subjectId], references: [id])
	subjectId String @unique
	acadamicYear AcadamicYear @relation(name: "AcadamicYearToExamResult", fields: [acadamicYearId], references: [id])
	acadamicYearId String @unique
	acadaminTerm AcadamicTerm @relation(name: "AcadamicTermToExamResult", fields: [acadamicTermId], references: [id])
	acadamicTermId String @unique
	classLevel ClassLevel @relation(name: "ClassLevelToExamResult", fields: [classLevelId], references: [id])
	classLevelId String @unique
	grade Int 
	score Int 
	passMark Int @default(50)
	status ExamResultStatus @default(failed)
	reamarks Remarks @default(poor)
	position Int 
	isPublished Boolean @default(false)
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
}
model Exam {
	id String @id @default(uuid())
	ExamResult ExamResult? @relation(name: "ExamToExamResult")
	name String 
	description String 
	subject Subject @relation(name: "ExamToSubject", fields: [subjectId], references: [id])
	subjectId String @unique
	program Program @relation(name: "ExamToProgram", fields: [programId], references: [id])
	programId String 
	passMark Int @default(50)
	totalMark Int @default(100)
	duration String @default("30")
	examDate DateTime 
	examTime String 
	examType String @default("Quiz")
	examStatus ExamStatus @default(pending)
	questions Question[] @relation(name: "ExamToQuestion")
	classLevel ClassLevel @relation(name: "ClassLevelToExam", fields: [classLevelId], references: [id])
	classLevelId String @unique
	createdBy String @unique
	acadamicYear AcadamicYear @relation(name: "AcadamicYearToExam", fields: [acadanmicYear], references: [id])
	acadanmicYear String @unique
	createAt DateTime @default(now())
	updateAt DateTime @updatedAt
	teacher Teacher @relation(name: "ExamToTeacher", fields: [teacherId], references: [id])
	teacherId String 
}
model Program {
	id String @id @default(uuid())
	Exam Exam[] @relation(name: "ExamToProgram")
	name String 
	description String 
	duration String @default("4 Years")
	code String @default("")
	adminId Admin @relation(name: "AdminToProgram", fields: [createdBy], references: [id])
	createdBy String 
	teachers Teacher[] @relation(name: "ProgramToTeacher")
	students Student[] @relation(name: "ProgramToStudent")
	Subjects Subject[] @relation(name: "ProgramToSubject")
	createAt DateTime @default(now())
	updateAt DateTime @updatedAt
}
model Question {
	id String @id @default(uuid())
	Exam Exam? @relation(name: "ExamToQuestion", fields: [examId], references: [id])
	examId String? 
	questionName String 
	optionA String 
	optionB String 
	optionC String 
	optionD String 
	correctAnswer String 
	isCorrect Boolean @default(false)
	teacher Teacher @relation(name: "QuestionToTeacher", fields: [createdBy], references: [id])
	createdBy String @unique
	createAt DateTime @default(now())
	updateAt DateTime @updatedAt
}
model ExamResults {
	id String @id @default(uuid())
	Student Student? @relation(name: "ExamResultsToStudent", fields: [studentId], references: [id])
	studentId String? 
}
model YearGroup {
	id String @id @default(uuid())
	name String 
	acadamicYear AcadamicYear? @relation(name: "AcadamicYearToYearGroup", fields: [acadamicYearId], references: [id])
	acadamicYearId String @unique
	createAt DateTime @default(now())
	updateAt DateTime @updatedAt
	admin Admin @relation(name: "AdminToYearGroup", fields: [adminId], references: [id])
	adminId String 
}
enum ExamResultStatus {
	failed
	passed
}
enum Remarks {
	Excellent
	good
	poor
}
enum ExamStatus {
	pending
	approved
	live
}
enum Role {
	teacher
	admin
}
enum Status {
	pending
	approved
	rejected
}