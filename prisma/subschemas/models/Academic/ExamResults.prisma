model ExamResult {
    id             String           @id @default(uuid())
    Student        Student?         @relation(fields: [studentId], references: [id])
    studentId      String?
    exam           Exam             @relation(fields: [examId], references: [id])
    examId         String           @unique
    student        Subject          @relation(fields: [subjectId], references: [id])
    subjectId      String           @unique
    acadamicYear   AcadamicYear     @relation(fields: [acadamicYearId], references: [id])
    acadamicYearId String           @unique
    acadaminTerm   AcadamicTerm     @relation(fields: [acadamicTermId], references: [id])
    acadamicTermId String           @unique
    classLevel     ClassLevel       @relation(fields: [classLevelId], references: [id])
    classLevelId   String           @unique
    grade          Int
    score          Int
    passMark       Int              @default(50)
    status         ExamResultStatus @default(failed)
    reamarks       Remarks          @default(poor)
    position       Int
    isPublished    Boolean          @default(false)
    createdAt      DateTime         @default(now())
    updatedAt      DateTime         @updatedAt()
}

model Student {
    id         String       @id @default(uuid())
    examResult ExamResult[]
}

model Exam {
    id         String      @id @default(uuid())
    ExamResult ExamResult?
}

model AcadamicYear {
    id         String      @id @default(uuid())
    ExamResult ExamResult?
}

model AcadamicTerm {
    id         String      @id @default(uuid())
    ExamResult ExamResult?
}

model ClassLevel {
    id         String      @id @default(uuid())
    ExamResult ExamResult?
}

model Subject {
    id         String      @id @default(uuid())
    ExamResult ExamResult?
}

enum ExamResultStatus {
    failed
    passed
}

enum Remarks {
    Excellent
    good
    poor
}
